EQUIPO 10
Demuestra una solución de desarrollo de software mediante Python que demuestre la aplicación de los conceptos de POO, tolerancia a fallos, el almacenamiento permanente del estado de esta; y publicarla en un repositorio de software colaborativo. Realizar una demostración presencial y en línea de la ejecución del código Python.

Intregantes de equipo

Nombre	Matricula
PEDRO GERARDO ARELLANO DE LA CRUZ	2045994


import json



# Primera Estructura
class Acciones:
    def __init__(self):
        self.asistentes =    []
        self.registros =     []
        self.espacios_disponibles = {'A': 1000, 'B': 200, 'C': 150}

    def agregar_asistente(self, matricula, nombre, apellido1, apellido2, fecha_nacimiento, carrera):
        asistente = {
            'matricula': matricula,
            'nombre': nombre,
            'apellido1': apellido1,
            'apellido2': apellido2,
            'fecha_nacimiento': fecha_nacimiento,
            'carrera': carrera
        }
        self.asistentes.append(asistente)
        print(f"Asistente {nombre} {apellido1} agregado.")

    def eliminar_asistente(self, matricula):
        for asistente in self.asistentes:
            if asistente['matricula'] == matricula:
                self.asistentes.remove(asistente)
                print(f"Asistente {asistente['nombre']} {asistente['apellido1']} eliminado.")
                return
        print("Asistente no encontrado.")

    def actualizar_asistente(self, matricula, nueva_info):
        for asistente in self.asistentes:
            if asistente['matricula'] == matricula:
                asistente.update(nueva_info)
                print(f"Información de asistente {matricula} actualizada.")
                return
        print("Asistente no encontrado.")

    def mostrar_info_asistente(self, matricula):
        for asistente in self.asistentes:
            if asistente['matricula'] == matricula:
                print("Información del asistente:")
                for key, value in asistente.items():
                    print(f"{key}: {value}")
                return
        print("Asistente no encontrado.")


    def registrar_asistente_a_evento(self, matricula, fecha, hora, auditorio):
        for asistente in self.asistentes:
            if asistente['matricula'] == matricula:
                if self.espacios_disponibles[auditorio] > 0:
                    registro = {
                        'matricula': matricula,
                        'fecha': fecha,
                        'hora': hora,
                        'auditorio': auditorio
                    }
                    self.registros.append(registro)
                    self.espacios_disponibles[auditorio] -= 1
                    print(f"Asistente {asistente['nombre']} {asistente['apellido1']} registrado en {auditorio}.")
                    return
                else:
                    print(f"No hay espacios disponibles en {auditorio}.")
                    return
        print("Asistente no encontrado.")

    def eliminar_registro_asistente_a_evento(self, matricula, fecha, hora, auditorio):
        for registro in self.registros:
            if registro['matricula'] == matricula and registro['fecha'] == fecha \
                    and registro['hora'] == hora and registro['auditorio'] == auditorio:
                self.registros.remove(registro)
                self.espacios_disponibles[auditorio] += 1
                print(f"Registro de asistente {matricula} eliminado en {auditorio}.")
                return
        print("Registro no encontrado.")

    def mostrar_info_registro_asistente(self, matricula):
        for registro in self.registros:
            if registro['matricula'] == matricula:
                print("Información del registro:")
                for key, value in registro.items():
                    print(f"{key}: {value}")
                return
        print("Registro no encontrado.")


class Generales:
    def guardar_datos(self, acciones):
        print("Datos guardados.")

    def leer_datos(self, acciones):
        print("Datos cargados.")

    def mostrar_espacios_disponibles(self, acciones):
        print("Espacios disponibles por conferencia:")
        for auditorio, capacidad in acciones.espacios_disponibles.items():
            print(f"Auditorio {auditorio}: {capacidad} lugares disponibles.")

    def mostrar_eventos_registrados_para_asistente(self, acciones, matricula):
        print(f"Eventos registrados para el asistente {matricula}:")
        for registro in acciones.registros:
            if registro['matricula'] == matricula:
                print(f"Fecha: {registro['fecha']}, Hora: {registro['hora']}, Auditorio: {registro['auditorio']}")

    def emitir_constancia_participacion(self, acciones, matricula):
        eventos_registrados = [registro['auditorio'] for registro in acciones.registros if registro['matricula'] == matricula]
        if len(eventos_registrados) >= 3:
            print(f"Constancia de participación emitida para el asistente {matricula}.")
        else:
            print(f"El asistente {matricula} no cumple con los requisitos para la constancia de participación.")

# Tu parte jose
def mostrar_menu_principal():
    print("------------------------------------------------------------------------------------------------")
    print("**** MENÚ PRINCIPAL DE FACULTAD\n*****")
    print("[A] Registrar un asistente.")
    print("[B] Registrar asistente a un evento.")
    print("[C] Registrar asistencia al evento.")
    print("[D] Ver eventos del alumno.")
    print("[E] Listado de asistencia a evento.")
    print("[X] Salir\n")
    print("------------------------------------------------------------------------------------------------")


def mostrar_menu_asistentes():
    print("------------------------------------------------------------------------------------------------")
    print("\n**** MENÚ DE ASISTENTES\n ")
    print("[A] Registrar nuevo asistente.")
    print("[B] Eliminar asistente.")
    print("[C] Modificar datos de asistente.")
    print("[D] Consultar asistente.")
    print("[X] Regresar al menú principal.\n")
    print("------------------------------------------------------------------------------------------------")


def menu_principal(acciones, generales):
    while True:
        mostrar_menu_principal()
        opcion = input("¿Qué deseas hacer?: ").upper()

        if opcion == "A":

            menu_asistentes(acciones)

        elif opcion == "B":

            matricula = input("Matrícula del asistente: ")
            fecha = input("Fecha del evento (YYYY-MM-DD): ")
            hora = input("Hora del evento: ")
            auditorio = input("Auditorio del evento (A, B o C): ")
            acciones.registrar_asistente_a_evento(matricula, fecha, hora, auditorio)

        elif opcion == "C":
            matricula = input("Matrícula del asistente: ")
            fecha = input("Fecha del evento (YYYY-MM-DD): ")
            hora = input("Hora del evento: ")
            auditorio = input("Auditorio del evento (A, B o C): ")
            acciones.eliminar_registro_asistente_a_evento(matricula, fecha, hora, auditorio)

        elif opcion == "D":
            matricula = input("Matrícula del asistente: ")
            generales.mostrar_eventos_registrados_para_asistente(acciones, matricula)

        elif opcion == "E":
            matricula = input("Matrícula del asistente: ")
            acciones.mostrar_info_registro_asistente(matricula)

        elif opcion == "X":
            break

        else:
            print("Opción no válida.Intetelo de Nuevo .")


def menu_asistentes(acciones):
    while True:
        mostrar_menu_asistentes()
        opcion = input("¿Qué deseas hacer?: ").upper()

        if opcion == "A":
            matricula = input("Matrícula: ")
            nombre = input("Nombre: ")
            apellido1 = input("Primer Apellido: ")
            apellido2 = input("Segundo Apellido: ")
            fecha_nacimiento = input("Fecha de Nacimiento (YYYY-MM-DD): ")
            carrera = input("Carrera: ")
            acciones.agregar_asistente(matricula, nombre, apellido1, apellido2, fecha_nacimiento, carrera)

        elif opcion == "B":
            matricula = input("Matrícula del asistente a eliminar: ")
            acciones.eliminar_asistente(matricula)

        elif opcion == "C":
            matricula = input("Matrícula del asistente a modificar: ")
            nueva_info = {
                'nombre': input("Nuevo Nombre: "),
                'apellido1': input("Nuevo Primer Apellido: "),
                'apellido2': input("Nuevo Segundo Apellido: "),
                'fecha_nacimiento': input("Nueva Fecha de Nacimiento (YYYY-MM-DD): "),
                'carrera': input("Nueva Carrera: ")
            }
            acciones.actualizar_asistente(matricula, nueva_info)

        elif opcion == "D":
            matricula = input("Matrícula del asistente a consultar: ")
            acciones.mostrar_info_asistente(matricula)

        elif opcion == "X":
            break

        else:
            print("Opción no válida.Intetelo de Nuevo.")


acciones = Acciones()
generales = Generales()
menu_principal(acciones, generales)
     
------------------------------------------------------------------------------------------------
**** MENÚ PRINCIPAL DE FACULTAD
*****
[A] Registrar un asistente.
[B] Registrar asistente a un evento.
[C] Registrar asistencia al evento.
[D] Ver eventos del alumno.
[E] Listado de asistencia a evento.
[X] Salir

------------------------------------------------------------------------------------------------

import json

class Acciones:
    def _init_(self):
        self.asistentes = []
        self.registros = []
        self.espacios_disponibles = {'A': 1000, 'B': 200, 'C': 150}

    def agregar_asistente(self, matricula, nombre, apellido1, apellido2, fecha_nacimiento, carrera):
        asistente = {
            'matricula': matricula,
            'nombre': nombre,
            'apellido1': apellido1,
            'apellido2': apellido2,
            'fecha_nacimiento': fecha_nacimiento,
            'carrera': carrera
        }
        self.asistentes.append(asistente)
        print(f"Asistente {nombre} {apellido1} agregado.")

    def eliminar_asistente(self, matricula):
        for asistente in self.asistentes:
            if asistente['matricula'] == matricula:
                self.asistentes.remove(asistente)
                print(f"Asistente {asistente['nombre']} {asistente['apellido1']} eliminado.")
                return
        print("Asistente no encontrado.")

    def actualizar_asistente(self, matricula, nueva_info):
        for asistente in self.asistentes:
            if asistente['matricula'] == matricula:
                asistente.update(nueva_info)
                print(f"Información de asistente {matricula} actualizada.")
                return
        print("Asistente no encontrado.")

    def mostrar_info_asistente(self, matricula):
        for asistente in self.asistentes:
            if asistente['matricula'] == matricula:
                print("Información del asistente:")
                for key, value in asistente.items():
                    print(f"{key}: {value}")
                return
        print("Asistente no encontrado.")

    def registrar_asistente_a_evento(self, matricula, fecha, hora, auditorio):
        for asistente in self.asistentes:
            if asistente['matricula'] == matricula:
                if self.espacios_disponibles[auditorio] > 0:
                    registro = {
                        'matricula': matricula,
                        'fecha': fecha,
                        'hora': hora,
                        'auditorio': auditorio
                    }
                    self.registros.append(registro)
                    self.espacios_disponibles[auditorio] -= 1
                    print(f"Asistente {asistente['nombre']} {asistente['apellido1']} registrado en {auditorio}.")
                    return
                else:
                    print(f"No hay espacios disponibles en {auditorio}.")
                    return
        print("Asistente no encontrado.")

    def eliminar_registro_asistente_a_evento(self, matricula, fecha, hora, auditorio):
        for registro in self.registros:
            if registro['matricula'] == matricula and registro['fecha'] == fecha \
                    and registro['hora'] == hora and registro['auditorio'] == auditorio:
                self.registros.remove(registro)
                self.espacios_disponibles[auditorio] += 1
                print(f"Registro de asistente {matricula} eliminado en {auditorio}.")
                return
        print("Registro no encontrado.")

    def mostrar_info_registro_asistente(self, matricula):
        for registro in self.registros:
            if registro['matricula'] == matricula:
                print("Información del registro:")
                for key, value in registro.items():
                    print(f"{key}: {value}")
                return
        print("Registro no encontrado.")

    def emitir_constancia_participacion(self, matricula):
        eventos_registrados = [registro['auditorio'] for registro in self.registros if registro['matricula'] == matricula]
        if len(eventos_registrados) >= 3:
            print(f"Constancia de participación emitida para el asistente {matricula}.")
        else:
            print(f"El asistente {matricula} no cumple con los requisitos para la constancia de participación.")

class Generales:
    def guardar_datos(self, acciones):
        with open('datos.json', 'w') as archivo:
            datos = {
                'asistentes': acciones.asistentes,
                'registros': acciones.registros,
                'espacios_disponibles': acciones.espacios_disponibles
            }
            json.dump(datos, archivo)
        print("Datos guardados.")

    def leer_datos(self, acciones):
        try:
            with open('datos.json', 'r') as archivo:
                datos = json.load(archivo)
                acciones.asistentes = datos.get('asistentes', [])
                acciones.registros = datos.get('registros', [])
                acciones.espacios_disponibles = datos.get('espacios_disponibles', {})
            print("Datos cargados.")
        except FileNotFoundError:
            print("No se encontró ningún archivo de datos.")

def mostrar_menu_principal():
    print("------------------------------------------------------------------------------------------------")
    print("**** MENÚ PRINCIPAL DE FACULTAD\n*****")
    print("[A] Registrar un asistente.")
    print("[B] Registrar asistente a un evento.")
    print("[C] Registrar asistencia al evento.")
    print("[D] Ver eventos del alumno.")
    print("[E] Listado de asistencia a evento.")
    print("[X] Salir\n")
    print("------------------------------------------------------------------------------------------------")

def mostrar_menu_asistentes():
    print("------------------------------------------------------------------------------------------------")
    print("\n**** MENÚ DE ASISTENTES\n ")
    print("[A] Registrar nuevo asistente.")
    print("[B] Eliminar asistente.")
    print("[C] Modificar datos de asistente.")
    print("[D] Consultar asistente.")
    print("[X] Regresar al menú principal.\n")
    print("------------------------------------------------------------------------------------------------")

def menu_principal(acciones, generales):
    while True:
        mostrar_menu_principal()
        opcion = input("¿Qué deseas hacer?: ").upper()

        if opcion == "A":
            menu_asistentes(acciones)

        elif opcion == "B":
            matricula = input("Matrícula del asistente: ")
            fecha = input("Fecha del evento (YYYY-MM-DD): ")
            hora = input("Hora del evento: ")
            auditorio = input("Auditorio del evento (A, B o C): ")
            acciones.registrar_asistente_a_evento(matricula, fecha, hora, auditorio)

        elif opcion == "C":
            matricula = input("Matrícula del asistente: ")
            fecha = input("Fecha del evento (YYYY-MM-DD): ")
            hora = input("Hora del evento: ")
            auditorio = input("Auditorio del evento (A, B o C): ")
            acciones.eliminar_registro_asistente_a_evento(matricula, fecha, hora, auditorio)

        elif opcion == "D":
            matricula = input("Matrícula del asistente: ")
            acciones.emitir_constancia_participacion(matricula)

        elif opcion == "E":
            matricula = input("Matrícula del asistente: ")
            acciones.mostrar_info_registro_asistente(matricula)

        elif opcion == "X":
            generales.guardar_datos(acciones)
            break

        else:
            print("Opción no válida. Inténtelo de nuevo.")

def menu_asistentes(acciones):
    while True:
        mostrar_menu_asistentes()
        opcion = input("¿Qué deseas hacer?: ").upper()

        if opcion == "A":
            matricula = input("Matrícula: ")
            nombre = input("Nombre: ")
            apellido1 = input("Primer Apellido: ")
            apellido2 = input("Segundo Apellido: ")
            fecha_nacimiento = input("Fecha de Nacimiento (YYYY-MM-DD): ")
            carrera = input("Carrera: ")
            acciones.agregar_asistente(matricula, nombre, apellido1, apellido2, fecha_nacimiento, carrera)

        elif opcion == "B":
            matricula = input("Matrícula del asistente a eliminar: ")
            acciones.eliminar_asistente(matricula)

        elif opcion == "C":
            matricula = input("Matrícula del asistente a modificar: ")
            nueva_info = {
                'nombre': input("Nuevo Nombre: "),
                'apellido1': input("Nuevo Primer Apellido: "),
                'apellido2': input("Nuevo Segundo Apellido: "),
                'fecha_nacimiento': input("Nueva Fecha de Nacimiento (YYYY-MM-DD): "),
                'carrera': input("Nueva Carrera: ")
            }
            acciones.actualizar_asistente(matricula, nueva_info)

        elif opcion == "D":
            matricula = input("Matrícula del asistente a consultar: ")
            acciones.mostrar_info_asistente(matricula)

        elif opcion == "X":
            break

        else:
            print("Opción no válida. Inténtelo de Nuevo.")

# Crear instancias de clases y llamar al menú principal
acciones = Acciones()
generales = Generales()
menu_principal(acciones, generales)
     